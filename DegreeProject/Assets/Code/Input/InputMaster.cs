//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Code/Input/InputMaster.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputMaster : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputMaster()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputMaster"",
    ""maps"": [
        {
            ""name"": ""TopDown"",
            ""id"": ""30d2e922-321c-4cc7-80ba-540aff61b100"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""8a138950-ffb0-4622-a204-4816073e1fc9"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""8535c722-3d20-4947-b5e1-d933231c43f5"",
                    ""path"": ""3DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""cba5618b-a6ae-4f6e-8a60-6dec0c1aac98"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f96fb0fc-cf04-48b4-849e-b9595fe2f965"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""6619e2df-000b-4f8b-8be9-686110277897"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""acca535b-d997-43e4-9ba7-3627c6d38cda"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""f2b48ce8-f744-4269-8cac-fb157f57f02f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""1d1c6db9-fe81-4948-a345-b56d6b99d775"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""SideScroller"",
            ""id"": ""14d7a12f-36b9-4ced-8f28-d0a2f07f7ee4"",
            ""actions"": [
                {
                    ""name"": ""LeftRight"",
                    ""type"": ""Value"",
                    ""id"": ""e935cc7c-0227-4c5e-9eb8-80d7fd34bb7b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""4466f20e-4099-486e-ad15-48afd48ff5f7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""d7c3cef0-1cd2-4e55-adb8-75f13e21ea60"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Axis"",
                    ""id"": ""51932347-9d8e-4a00-9f28-537421511e35"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""67615dba-8f51-4add-b2d4-4fdef31ca5a9"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""96a6b490-a08d-48f7-825e-bc657a85e0f0"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""General"",
            ""id"": ""f66dae1a-0075-48ac-97c4-c4f7e10843b3"",
            ""actions"": [
                {
                    ""name"": ""SwitchView"",
                    ""type"": ""Button"",
                    ""id"": ""22febce6-c7ee-463f-944f-695549338f04"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RotateView"",
                    ""type"": ""Button"",
                    ""id"": ""ba1a00b3-974c-4d0d-9719-9d2560fd3c2c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b57143fe-4eba-49e0-95e4-2d3fae982dff"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""721adaad-b637-424b-a6f3-e4d3cdf1a00a"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateView"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""4dc0ae42-b0ca-413c-bfac-29f8699989fe"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""af9077d1-19f9-4a60-b0ed-da2415840bd8"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RotateView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TopDown
        m_TopDown = asset.FindActionMap("TopDown", throwIfNotFound: true);
        m_TopDown_Move = m_TopDown.FindAction("Move", throwIfNotFound: true);
        // SideScroller
        m_SideScroller = asset.FindActionMap("SideScroller", throwIfNotFound: true);
        m_SideScroller_LeftRight = m_SideScroller.FindAction("LeftRight", throwIfNotFound: true);
        m_SideScroller_Jump = m_SideScroller.FindAction("Jump", throwIfNotFound: true);
        // General
        m_General = asset.FindActionMap("General", throwIfNotFound: true);
        m_General_SwitchView = m_General.FindAction("SwitchView", throwIfNotFound: true);
        m_General_RotateView = m_General.FindAction("RotateView", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TopDown
    private readonly InputActionMap m_TopDown;
    private ITopDownActions m_TopDownActionsCallbackInterface;
    private readonly InputAction m_TopDown_Move;
    public struct TopDownActions
    {
        private @InputMaster m_Wrapper;
        public TopDownActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_TopDown_Move;
        public InputActionMap Get() { return m_Wrapper.m_TopDown; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TopDownActions set) { return set.Get(); }
        public void SetCallbacks(ITopDownActions instance)
        {
            if (m_Wrapper.m_TopDownActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_TopDownActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_TopDownActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_TopDownActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_TopDownActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public TopDownActions @TopDown => new TopDownActions(this);

    // SideScroller
    private readonly InputActionMap m_SideScroller;
    private ISideScrollerActions m_SideScrollerActionsCallbackInterface;
    private readonly InputAction m_SideScroller_LeftRight;
    private readonly InputAction m_SideScroller_Jump;
    public struct SideScrollerActions
    {
        private @InputMaster m_Wrapper;
        public SideScrollerActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftRight => m_Wrapper.m_SideScroller_LeftRight;
        public InputAction @Jump => m_Wrapper.m_SideScroller_Jump;
        public InputActionMap Get() { return m_Wrapper.m_SideScroller; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SideScrollerActions set) { return set.Get(); }
        public void SetCallbacks(ISideScrollerActions instance)
        {
            if (m_Wrapper.m_SideScrollerActionsCallbackInterface != null)
            {
                @LeftRight.started -= m_Wrapper.m_SideScrollerActionsCallbackInterface.OnLeftRight;
                @LeftRight.performed -= m_Wrapper.m_SideScrollerActionsCallbackInterface.OnLeftRight;
                @LeftRight.canceled -= m_Wrapper.m_SideScrollerActionsCallbackInterface.OnLeftRight;
                @Jump.started -= m_Wrapper.m_SideScrollerActionsCallbackInterface.OnJump;
                @Jump.performed -= m_Wrapper.m_SideScrollerActionsCallbackInterface.OnJump;
                @Jump.canceled -= m_Wrapper.m_SideScrollerActionsCallbackInterface.OnJump;
            }
            m_Wrapper.m_SideScrollerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @LeftRight.started += instance.OnLeftRight;
                @LeftRight.performed += instance.OnLeftRight;
                @LeftRight.canceled += instance.OnLeftRight;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
            }
        }
    }
    public SideScrollerActions @SideScroller => new SideScrollerActions(this);

    // General
    private readonly InputActionMap m_General;
    private IGeneralActions m_GeneralActionsCallbackInterface;
    private readonly InputAction m_General_SwitchView;
    private readonly InputAction m_General_RotateView;
    public struct GeneralActions
    {
        private @InputMaster m_Wrapper;
        public GeneralActions(@InputMaster wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchView => m_Wrapper.m_General_SwitchView;
        public InputAction @RotateView => m_Wrapper.m_General_RotateView;
        public InputActionMap Get() { return m_Wrapper.m_General; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GeneralActions set) { return set.Get(); }
        public void SetCallbacks(IGeneralActions instance)
        {
            if (m_Wrapper.m_GeneralActionsCallbackInterface != null)
            {
                @SwitchView.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSwitchView;
                @SwitchView.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSwitchView;
                @SwitchView.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnSwitchView;
                @RotateView.started -= m_Wrapper.m_GeneralActionsCallbackInterface.OnRotateView;
                @RotateView.performed -= m_Wrapper.m_GeneralActionsCallbackInterface.OnRotateView;
                @RotateView.canceled -= m_Wrapper.m_GeneralActionsCallbackInterface.OnRotateView;
            }
            m_Wrapper.m_GeneralActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SwitchView.started += instance.OnSwitchView;
                @SwitchView.performed += instance.OnSwitchView;
                @SwitchView.canceled += instance.OnSwitchView;
                @RotateView.started += instance.OnRotateView;
                @RotateView.performed += instance.OnRotateView;
                @RotateView.canceled += instance.OnRotateView;
            }
        }
    }
    public GeneralActions @General => new GeneralActions(this);
    public interface ITopDownActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface ISideScrollerActions
    {
        void OnLeftRight(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
    }
    public interface IGeneralActions
    {
        void OnSwitchView(InputAction.CallbackContext context);
        void OnRotateView(InputAction.CallbackContext context);
    }
}
